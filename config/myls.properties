#
# ----------------------------
# Database Config's:
# ----------------------------

# This is the database url
# Set the serverTimezone value if you get an error during startup. It is needed to avoid timestamp errors during daylight savings clock change
database.url = jdbc:mysql://192.168.0.123:3306/aion_beyond_ls?serverTimezone=&characterEncoding=UTF-8

# Database user
database.user = dev

# Database password
database.password = !Dev_123!

# Maximal amount of connections kept in connection pool
database.connectionpool.connections.max = 5

# Maximum wait time when getting a DB connection, before throwing a timeout error
database.connectionpool.timeout = 5000

#
# ----------------------------
# Network Config's:
# ----------------------------

# Local address where LS will listen for Aion client connections (0.0.0.0 = bind any local IP)
loginserver.network.client.socket_address = 0.0.0.0:2106

# How many times player can try to login before he get's banned for brute-forcing
loginserver.network.client.logintrybeforeban = 5

# For what time in minutes the player should be banned in case of brute-forcing
loginserver.network.client.bantimeforbruteforcing = 15

# Local address where LS will listen for GS connections (0.0.0.0 = bind any local IP)
loginserver.network.gameserver.socket_address = 0.0.0.0:9014

# Number of extra threads dedicated only to read/write network data.
# Value < 1 means that acceptor thread will also handle read & write.
# Value > 0 means there will be x dedicated read/write threads + 1 acceptor.
loginserver.network.nio.threads = 0

# Create accounts automatically on login or not?
# Default: true
loginserver.accounts.autocreate = true

# URL for external authentication
# With this login credentials will be checked externally and not be stored in LS DB.
# Login server will send credentials it received from the client via HTTP POST as a JSON payload to the remote authentication server:
# {
#   "user": string,
#   "password": string
# }
# The remote authentication server must then respond with a JSON with the following structure:
# {
# 	"accountId": string // unique user id or name that will be used to identify the LS user account; should be null if not authed
# 	"aionAuthResponseId": number // auth state (see com.aionemu.loginserver.network.aion.AionAuthResponse), must be zero if authed
# }
# If the response contains a valid id, the account will be logged in, otherwise the given state will be returned to the client.
# Note: Set loginserver.accounts.autocreate to true, otherwise new users can't log in
# Default: empty (deactivated)
loginserver.accounts.external_auth.url =

# Enable brute-force protector from 1 IP on account login
# Default: true
loginserver.server.bruteforceprotector = true